#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Aug 02, 2017 01:10:26 PM
import sys

try:
    from Tkinter import *
    from tkinter.messagebox import*
except ImportError:
    from tkinter import *
    from tkinter.messagebox import*

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import Postes_support
import time
import datetime
import pymysql as mysql
from tkinter.messagebox import*
date = datetime.datetime.now()
mois={'1':'Janvier','2':'Fevrier','3':'Mars','4':'Avril','5':'Mai','6':'Juin',
      '7':'Juillet','8':'Aout','9':'Septembre','10':'Octobre','11':'Novembre','12':'Décembre'}
m=str(date.month)

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    Postes_support.set_Tk_var()
    top = Mise_à_jour_poste (root)
    Postes_support.init(root, top)
    root.mainloop()

w = None
def create_Mise_à_jour_poste(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Postes_support.set_Tk_var()
    top = Mise_à_jour_poste (w)
    Postes_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Mise_à_jour_poste():
    global w
    w.destroy()
    w = None


class Mise_à_jour_poste:
    def maj():
        Postes_support.heure.set(time.strftime('%H:%M:%S'))
        root.after(1000,Mise_à_jour_poste.maj)
    def __init__(self, top=None):
        
        def affichage():
            connexion = mysql.connect("localhost","root","","test" )
            cursor = connexion.cursor()
            sql = """SELECT * FROM table1"""
            try:
                #execution de la commande sql
                cursor.execute(sql)
                # selection de tous les champs 
                results = cursor.fetchall()
                for row in results:
                    codeposte = row[0]
                    codeposte=str(codeposte)
                    libpost= row[1]
                    libpost=str(libpost)
                    self.listead.insert('', 1, values=(codeposte,libpost))
                   
            except:
                showwarning("ERREUR","probleme de connexion a la bd")

        
        def active():
            self.Entry1.configure(state=NORMAL)
            self.Entry2.configure(state=NORMAL)
            
        #inssertion dans la bd et dans le tableau
        def inserer():
            
                active()
                connexion = mysql.connect("localhost","root","","test" )
                cursor = connexion.cursor()
   
                sql = """INSERT INTO `test`.`table1` ( `id` ,`nom` )VALUES NULL , '"""+Postes_support.libpost.get()+"""')"""                                             
                try:
                   cursor.execute(sql)
                   connexion.commit()
                   
                except:
                   connexion.rollback()
                   connexion.close()
                
                self.listead.insert('', 1, values=(Postes_support.codeposte.get(),Postes_support.libpost.get()))
                    
            
        #suppresion d'un element dans la bd 
        def supprimer():
            
            selectioner=self.listead.selection()
            reponse=askyesno("CONFIRMATION","voulez vous supprimer")
            #demande de confirmation
            if reponse:
                
                if selectioner:
                    elmtsup=selectioner[0]
                    elementsupbd=self.listead.set(elmtsup)
                    Postes_support.codeposte.set(elementsupbd['col1'])
                    connexion = mysql.connect("localhost","root","","test" )
                    cursor = connexion.cursor()

                    sql = """DELETE FROM `test`.`table1` WHERE `table1`.`id` ="""+Postes_support.codeposte.get()+""" """                                             
                    try:
                       cursor.execute(sql)
                       connexion.commit()
                    except:
                        connexion.rollback()
                        connexion.close()
                else:
                     showinfo('INFORMATION','sélectionner d\'abord l\'élément à supprimer')
            self.listead.delete(elmtsup)
        #modification d'un element de la bd 
        def modifier():
            selectioner=self.listead.selection()
            reponse=askyesno("confirmation","vous voulez vous modifier")
            if reponse:
                
                
                    if selectioner:
                        idtableau=selectioner[0]
                        v=self.listead.set(idtableau)
                
                        Postes_support.codeposte.set(v['col1'])
                        Postes_support.libpost.set(v['col2'])
                        
                        self.Entry1.configure(state=DISABLED)
                        supprimer()
                        

                    else:
                        showinfo('INFORMATION','sélectionner d\'abord l\'élément à modifier')
                        
            
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("960x788+300+00")
        top.title("Mise à jour poste")
        top.configure(background="#EFF0EF")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")



        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.04, rely=0.1, relheight=0.44
                , relwidth=0.92)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Info/Poste''')
        self.Labelframe1.configure(background="#EFF0EF")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=920)

        self.Label1 = Label(self.Labelframe1)
        self.Label1.place(relx=0.05, rely=0.42, height=26, width=41)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#EFF0EF")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Code''')

        self.Label2 = Label(self.Labelframe1)
        self.Label2.place(relx=0.65, rely=0.43, height=26, width=61)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#EFF0EF")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Libéllé''')

        self.Entry1 = Entry(self.Labelframe1)
        self.Entry1.place(relx=0.17, rely=0.42, relheight=0.07, relwidth=0.16)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=Postes_support.codeposte)
        

        self.Entry2 = Entry(self.Labelframe1)
        self.Entry2.place(relx=0.76, rely=0.43, relheight=0.07, relwidth=0.16)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
        self.Entry2.configure(textvariable=Postes_support.libpost)

        self.Button1 = Button(top)
        self.Button1.place(relx=0.3, rely=0.6, height=33, width=156)
        self.Button1.configure(activebackground="#218DF2")
        self.Button1.configure(activeforeground="white")
        self.Button1.configure(activeforeground="white")
        self.Button1.configure(background="#218DF2")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="white")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''VALIDER''',command=inserer)
        self.Button1.bind('<Button-1>',lambda e:Postes_support.Valider(e))

        self.Buttona = Button(top)
        self.Buttona.place(relx=0.5, rely=0.6, height=33, width=156)
        self.Buttona.configure(activebackground="#218DF2")
        self.Buttona.configure(activeforeground="white")
        self.Buttona.configure(activeforeground="white")
        self.Buttona.configure(background="#218DF2")
        self.Buttona.configure(disabledforeground="#a3a3a3")
        self.Buttona.configure(foreground="white")
        self.Buttona.configure(highlightbackground="#d9d9d9")
        self.Buttona.configure(highlightcolor="black")
        self.Buttona.configure(pady="0")
        self.Buttona.configure(text='''+Postes''')
        self.Buttona.bind('<Button-1>',lambda e:Postes_support.Nvposte(e))    

        

        

        self.Labelframe4 = LabelFrame(top)
        self.Labelframe4.place(relx=0.03, rely=0.68, relheight=0.24
                , relwidth=0.93)
        self.Labelframe4.configure(relief=GROOVE)
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(text='''Liste des postes''')
        self.Labelframe4.configure(background="#EFF0EF")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")
        self.Labelframe4.configure(width=930)

        self.listead= ttk.Treeview(self.Labelframe4,columns=('col1','col2'))
        #self.defilY=Scrollbar(self.configure,orient='vertical',command=self.listead.yview)
        self.listead.column('#0',width=0)
        self.listead.column('#1',width=250)
        self.listead.column('#2',width=450)
        #listead.column('#7',width=130)
        self.listead.heading('#1',text='Code',anchor=CENTER)
        self.listead.heading('#2',text='Libéllé',anchor=CENTER)
        
        #listead.heading('#7',text='nationalité',anchor=CENTER)
        self.listead.grid(row=0)
        #self.defilY.grid(row=3)
        affichage()
        self.Button3 = Button(self.Labelframe4)
        self.Button3.place(relx=0.84, rely=0.26, height=33, width=89)
        self.Button3.configure(activebackground="#218DF2")
        self.Button3.configure(activeforeground="white")
        self.Button3.configure(activeforeground="white")
        self.Button3.configure(background="#218DF2")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="white")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Modifier''',command=modifier)
        self.Button3.configure(width=89)

        self.Button4 = Button(self.Labelframe4)
        self.Button4.place(relx=0.84, rely=0.52, height=33, width=89)
        self.Button4.configure(activebackground="#EA8144")
        self.Button4.configure(activeforeground="white")
        self.Button4.configure(background="#EA8144")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="white")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Supprimer''',command=supprimer)

        self.Labelframe5 = LabelFrame(top)
        self.Labelframe5.place(relx=0.04, rely=0.01, relheight=0.09
                , relwidth=0.92)
        self.Labelframe5.configure(relief=GROOVE)
        self.Labelframe5.configure(foreground="black")
        self.Labelframe5.configure(text='''Information/système''')
        self.Labelframe5.configure(background="#EFF0EF")
        self.Labelframe5.configure(highlightbackground="#d9d9d9")
        self.Labelframe5.configure(highlightcolor="black")
        self.Labelframe5.configure(width=920)

        self.Label8 = Label(self.Labelframe5)
        self.Label8.place(relx=0.82, rely=0.4, height=26, width=92)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#EFF0EF")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Heure''')
        self.Label8.configure(textvariable=Postes_support.heure)
        Mise_à_jour_poste.maj()

        self.Label9 = Label(self.Labelframe5)
        self.Label9.place(relx=0.77, rely=0.4, height=26, width=53)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#EFF0EF")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''Heure :''')

        self.Label10 = Label(self.Labelframe5)
        self.Label10.place(relx=0.77, rely=0.0, height=26, width=45)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(background="#EFF0EF")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(text='''Date :''')

        self.Label11 = Label(self.Labelframe5)
        self.Label11.place(relx=0.82, rely=0.0, height=26, width=82)
        self.Label11.configure(background="#EFF0EF")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(text="{0} /{1} /{2}".format(date.day,mois[m],date.year))
        self.Label11.configure(width=82)






if __name__ == '__main__':
    vp_start_gui()



